public static class User {
    private static String username;
    private static String password;
    private static boolean isAdmin;

    public User(String username, String password, boolean isAdmin) {
        this.username = username;
        this.password = password;
        this.isAdmin = isAdmin;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    public boolean isAdmin() {
        return isAdmin;
    }
}
private static List<User> users = new ArrayList<>();

static {
    // Add default admin account
    users.add(new User("admin", "admin123", true));
}

private static void populateMovies() {
    // Add sample current movies
    currentMovies.add(new Movie(
            "The Batman",
            "Action",
            "A detective story with Batman facing the Riddler.",
            120,
            true,
            "Robert Pattinson, ZoÃ« Kravitz, Colin Farrell",
            "An intense, grounded superhero movie.",
            4.5,
            new String[]{"12:00 PM", "3:00 PM", "6:00 PM", "9:00 PM"},
            new String[]{"Theater 1", "Theater 2"}
    ));
    currentMovies.add(new Movie(
            "Spider-Man: No Way Home",
            "Adventure",
            "Spider-Man teams up with alternate versions of himself to fight villains.",
            150,
            true,
            "Tom Holland, Zendaya, Benedict Cumberbatch",
            "An ambitious, nostalgic adventure.",
            4.8,
            new String[]{"1:00 PM", "4:00 PM", "7:00 PM", "10:00 PM"},
            new String[]{"Theater 3", "Theater 4"}
    ));
}

private static void showHomePage() {
    JFrame frame = new JFrame("Movie Booking System - Home");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(500, 400);

    JPanel panel = new JPanel(new GridLayout(currentMovies.size(), 1));
    JLabel welcomeLabel = new JLabel("Welcome to the Movie Booking System!", SwingConstants.CENTER);

    panel.add(welcomeLabel);

    for (Movie movie : currentMovies) {
        JButton movieButton = new JButton(movie.getTitle());
        movieButton.addActionListener(e -> showMovieDetails(frame, movie));
        panel.add(movieButton);
    }

    frame.add(panel);
    frame.setVisible(true);
}

private static void showMovieDetails(JFrame parent, Movie movie) {
    parent.dispose();
    JFrame frame = new JFrame("Movie Details - " + movie.getTitle());
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(600, 800);

    JPanel panel = new JPanel();
    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

    // Movie Details
    panel.add(new JLabel("Title: " + movie.getTitle()));
    panel.add(new JLabel("Genre: " + movie.getGenre()));
    panel.add(new JLabel("Runtime: " + movie.getRuntime() + " minutes"));
    panel.add(new JLabel("Synopsis: " + movie.getDescription()));
    panel.add(new JLabel("Cast: " + movie.getCast()));
    panel.add(new JLabel("Review: " + (movie.getReview() != null ? movie.getReview() : "No reviews yet")));
    panel.add(new JLabel("Rating: " + (movie.getRating() != null ? movie.getRating() + " / 5" : "N/A")));

    // Reviews Section
    panel.add(new JLabel("User Reviews:"));
    JTextArea reviewsArea = new JTextArea(10, 40);
    reviewsArea.setEditable(false);
    reviewsArea.setLineWrap(true);
    reviewsArea.setWrapStyleWord(true);
    StringBuilder reviewsText = new StringBuilder();
    for (String review : movie.getReviews()) {
        reviewsText.append("- ").append(review).append("\n");
    }
    reviewsArea.setText(reviewsText.toString());
    panel.add(new JScrollPane(reviewsArea));

    // Add Review Section
    panel.add(new JLabel("Write a Review:"));
    JTextArea reviewInput = new JTextArea(5, 40);
    reviewInput.setLineWrap(true);
    reviewInput.setWrapStyleWord(true);
    JButton submitReviewButton = new JButton("Submit Review");
    submitReviewButton.addActionListener(e -> {
        String newReview = reviewInput.getText().trim();
        if (!newReview.isEmpty()) {
            movie.addReview(newReview);
            reviewsText.append("- ").append(newReview).append("\n");
            reviewsArea.setText(reviewsText.toString());
            reviewInput.setText("");
            JOptionPane.showMessageDialog(frame, "Thank you for your review!");
        } else {
            JOptionPane.showMessageDialog(frame, "Review cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    });
    panel.add(new JScrollPane(reviewInput));
    panel.add(submitReviewButton);

    // Purchase Ticket Section
    panel.add(new JLabel("Purchase Tickets:"));
    JLabel theaterLabel = new JLabel("Select Theater:");
    JComboBox<String> theaterBox = new JComboBox<>(movie.getTheaters());

    JLabel timeLabel = new JLabel("Select Showtime:");
    JComboBox<String> timeBox = new JComboBox<>(movie.getShowtimes());

    JLabel seatsLabel = new JLabel("Number of Seats:");
    SpinnerNumberModel seatModel = new SpinnerNumberModel(1, 1, 10, 1);
    JSpinner seatsSpinner = new JSpinner(seatModel);

    JButton purchaseButton = new JButton("Proceed to Payment");
    purchaseButton.addActionListener(e -> showPaymentPage(frame, movie, theaterBox, timeBox, seatsSpinner));

    panel.add(theaterLabel);
    panel.add(theaterBox);
    panel.add(timeLabel);
    panel.add(timeBox);
    panel.add(seatsLabel);
    panel.add(seatsSpinner);
    panel.add(purchaseButton);

    JButton backButton = new JButton("Back");
    backButton.addActionListener(e -> {
        frame.dispose();
        showHomePage();
    });
    panel.add(backButton);

    frame.add(new JScrollPane(panel));
    frame.setVisible(true);
}


private static void showBookingPage(JFrame parent, Movie movie) {
    parent.dispose();
    JFrame frame = new JFrame("Book Tickets - " + movie.getTitle());
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(500, 400);

    JPanel panel = new JPanel(new GridLayout(6, 2));
    JLabel theaterLabel = new JLabel("Select Theater:");
    JComboBox<String> theaterBox = new JComboBox<>(movie.getTheaters());

    JLabel timeLabel = new JLabel("Select Showtime:");
    JComboBox<String> timeBox = new JComboBox<>(movie.getShowtimes());

    JLabel seatsLabel = new JLabel("Number of Seats:");
    SpinnerNumberModel seatModel = new SpinnerNumberModel(1, 1, 10, 1);
    JSpinner seatsSpinner = new JSpinner(seatModel);

    JButton nextButton = new JButton("Proceed to Payment");
    nextButton.addActionListener(e -> showPaymentPage(frame, movie, theaterBox, timeBox, seatsSpinner));

    panel.add(theaterLabel);
    panel.add(theaterBox);
    panel.add(timeLabel);
    panel.add(timeBox);
    panel.add(seatsLabel);
    panel.add(seatsSpinner);
    panel.add(new JLabel()); // Spacer
    panel.add(nextButton);

    frame.add(panel);
    frame.setVisible(true);
}
private static void showPaymentPage(JFrame parent, Movie movie, JComboBox<String> theaterBox, JComboBox<String> timeBox, JSpinner seatsSpinner) {
    parent.dispose();
    JFrame frame = new JFrame("Payment - " + movie.getTitle());
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(500, 500);

    JPanel panel = new JPanel(new GridLayout(8, 2));
    JLabel paymentMethodLabel = new JLabel("Select Payment Method:");
    JComboBox<String> paymentMethodBox = new JComboBox<>(new String[]{"Debit Card", "Credit Card"});

    JLabel cardNumberLabel = new JLabel("Card Number:");
    JTextField cardNumberField = new JTextField();

    JLabel nameOnCardLabel = new JLabel("Name on Card:");
    JTextField nameOnCardField = new JTextField();

    JLabel expiryDateLabel = new JLabel("Expiry Date (MM/YY):");
    JTextField expiryDateField = new JTextField();

    JLabel cvvLabel = new JLabel("CVV:");
    JTextField cvvField = new JTextField();

    JButton confirmButton = new JButton("Confirm Purchase");
    confirmButton.addActionListener(e -> {
        String paymentMethod = (String) paymentMethodBox.getSelectedItem();
        String cardNumber = cardNumberField.getText();
        String nameOnCard = nameOnCardField.getText();
        String expiryDate = expiryDateField.getText();
        String cvv = cvvField.getText();

        if (validatePaymentFields(cardNumber, nameOnCard, expiryDate, cvv)) {
            int seats = (int) seatsSpinner.getValue();
            String theater = (String) theaterBox.getSelectedItem();
            String time = (String) timeBox.getSelectedItem();

            JOptionPane.showMessageDialog(frame, "Purchase confirmed!\n" +
                    "Movie: " + movie.getTitle() + "\n" +
                    "Theater: " + theater + "\n" +
                    "Showtime: " + time + "\n" +
                    "Seats: " + seats + "\n" +
                    "Payment Method: " + paymentMethod);
            frame.dispose();
            showHomePage();
        } else {
            JOptionPane.showMessageDialog(frame, "Invalid payment details. Please check and try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    panel.add(paymentMethodLabel);
    panel.add(paymentMethodBox);
    panel.add(cardNumberLabel);
    panel.add(cardNumberField);
    panel.add(nameOnCardLabel);
    panel.add(nameOnCardField);
    panel.add(expiryDateLabel);
    panel.add(expiryDateField);
    panel.add(cvvLabel);
    panel.add(cvvField);
    panel.add(new JLabel()); // Spacer
    panel.add(confirmButton);

    frame.add(panel);
    frame.setVisible(true);
}
private static boolean validatePaymentFields(String cardNumber, String nameOnCard, String expiryDate, String cvv) {
    return !cardNumber.isEmpty() && cardNumber.matches("\\d{16}") &&
            !nameOnCard.isEmpty() &&
            !expiryDate.isEmpty() && expiryDate.matches("\\d{2}/\\d{2}") &&
            !cvv.isEmpty() && cvv.matches("\\d{3}");
}
private static void processBooking(JFrame parent, Movie movie, JComboBox<String> theaterBox, JComboBox<String> timeBox, JSpinner seatsSpinner) {
    String theater = (String) theaterBox.getSelectedItem();
    String time = (String) timeBox.getSelectedItem();
    int seats = (int) seatsSpinner.getValue();

    // Simulate secure payment (placeholder)
    boolean paymentSuccess = processPayment();

    if (paymentSuccess) {
        movie.sellTickets(seats); // Update tickets sold
        JOptionPane.showMessageDialog(parent, "Booking confirmed!\n" +
                "Movie: " + movie.getTitle() + "\n" +
                "Theater: " + theater + "\n" +
                "Showtime: " + time + "\n" +
                "Seats: " + seats);
        parent.dispose();
        showHomePage();
    } else {
        JOptionPane.showMessageDialog(parent, "Payment failed. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

private static void showAdminPage() {
    JFrame frame = new JFrame("Admin Page");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(500, 400);

    JPanel panel = new JPanel();
    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

    JLabel header = new JLabel("System Status Report", SwingConstants.CENTER);
    header.setFont(new Font("Arial", Font.BOLD, 18));
    panel.add(header);

    // Display movie and ticket information
    for (Movie movie : currentMovies) {
        panel.add(new JLabel("Movie: " + movie.getTitle()));
        panel.add(new JLabel("Tickets Sold: " + movie.getTicketsSold()));
    }

    JButton backButton = new JButton("Log Out");
    backButton.addActionListener(e -> {
        frame.dispose();
        showLoginPage();
    });

    panel.add(backButton);

    frame.add(new JScrollPane(panel));
    frame.setVisible(true);
}

private static boolean processPayment() {
    // Placeholder for secure payment simulation
    // In a real system, integrate secure payment APIs and never store sensitive information.
    return JOptionPane.showConfirmDialog(null, "Confirm payment of $10 per ticket?", "Payment",
            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;
}
